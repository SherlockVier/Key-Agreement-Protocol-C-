using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Numerics;
using System.Management;
using System.Xml;
using System.Net;
using System.Net.Sockets;
using System.IO;
using System.Threading;
using System.Security.Cryptography;

namespace Sender
{
    public partial class FormSender : Form
    {
        string IDa;
        string N_1;
        string encryptedN_2;
        string decryptedN_2;
        string encryptedIDa;
        string encryptedN_1;
        string publicKey;
        string privateKey;
        string KS = "Key";
        Socket server = null;
        Socket connection = null;
        Thread threadServer = null;

        public FormSender()
        {
            InitializeComponent();
            TextBox.CheckForIllegalCrossThreadCalls = false;
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            skinEngine1.SkinFile = Application.StartupPath + @"\MacOS.ssk";
            Panel1.Visible = true;
            Panel2.Visible = false;
            Button_OpenPrivateKey.Enabled = false;
            Button_SendN_1.Enabled = false;
            Button_Start.Enabled = false;
            Button_SendN_2.Enabled = false;
            Button_SendKS.Enabled = false;
        }

        private void Button_CreateRandom_Click(object sender, EventArgs e)
        {
            TextBox_InputRandom.Text = RSA.CreateRandom();
        }

        private void Button_Next_Click(object sender, EventArgs e)
        {
            N_1 = TextBox_InputRandom.Text.Trim();
            if (N_1 != "")
            {
                Panel2.Visible = true;
                Panel1.Visible = false;
                IDa = "This is A";
                TextBox_Process.Text = "请导入接收方公钥以加密随机数和身份标识。\n";
            }
            else
                MessageBox.Show("请输入有效的随机数。");
        }

        private void Button_Back_Click(object sender, EventArgs e)
        {
            Panel1.Visible = true;
            Panel2.Visible = false;
        }

        private void 新建密钥ToolStripMenuItem1_Click(object sender, EventArgs e)
        {
            RSACryptoServiceProvider send = new RSACryptoServiceProvider();
            RSACryptoServiceProvider receive = new RSACryptoServiceProvider();

            using (StreamWriter sw = new StreamWriter("SenderPrivateKey.xml"))
            {
                sw.WriteLine(send.ToXmlString(true));
            }
            using (StreamWriter sw = new StreamWriter("SenderPublicKey.xml"))
            {
                sw.WriteLine(send.ToXmlString(false));
            }
            using (StreamWriter sw = new StreamWriter("ReceiverPrivateKey.xml"))
            {
                sw.WriteLine(receive.ToXmlString(true));
            }
            using (StreamWriter sw = new StreamWriter("ReceiverPublicKey.xml"))
            {
                sw.WriteLine(receive.ToXmlString(false));
            }
            MessageBox.Show("密钥文件已建立");
        }

        private void btnPath_Click(object sender, EventArgs e)
        {
            FolderBrowserDialog dialog = new FolderBrowserDialog();
            dialog.Description = "请选择文件路径";
            if (dialog.ShowDialog() == DialogResult.OK)
            {
                string foldPath = dialog.SelectedPath;
                MessageBox.Show("已选择文件夹:" + foldPath, "选择文件夹提示", MessageBoxButtons.OK,MessageBoxIcon.Information);
            }
        }

        private void btnOpen_Click(object sender, EventArgs e)
        {
            System.Diagnostics.Process.Start("Explorer.exe", "c:\\windows");
        }

        private void Button_OpenPublicKey_Click(object sender, EventArgs e)
        {
            OpenFileDialog fileDialog      = new OpenFileDialog();
            fileDialog.Multiselect         = true;
            fileDialog.Title               = "请选择文件";
            fileDialog.Filter              = "文件格式(*.xml)|*.xml";
            if (fileDialog.ShowDialog()    == DialogResult.OK)
            {
                string file                = fileDialog.FileName;
                MessageBox.Show("已选择文件:" + file, "选择文件提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                TextBox_PublicKeyPath.Text = fileDialog.FileName;
                XmlDocument xmlDoc         = new XmlDocument();
                xmlDoc.Load(fileDialog.FileName);
                XmlNode root               = xmlDoc.SelectSingleNode("RSAKeyValue");
                if (root != null)
                {
                    if (root.SelectSingleNode("Exponent") != null)
                    {
                        StreamReader sr    = new StreamReader(fileDialog.FileName, false);
                        publicKey          = sr.ReadLine().ToString();
                        sr.Close();
                        TextBox_Process.AppendText("接收方公钥已加载完成，即将对随机数N1和身份标识进行加密。\n");
                        encryptedN_1             = RSA.EncryptPublicKey(publicKey,N_1);
                        encryptedIDa             = RSA.EncryptPublicKey(publicKey,IDa);
                        TextBox_Process.AppendText("随机数N1和身份标识已完成加密，下面将随机数N1和身份标识发送给接收方。\n");
                        Button_Start.Enabled = true;
                    }
                    else
                    {
                        MessageBox.Show("未找到公钥请检查文件是否正确", "错误");
                    }
                }
                else
                {
                    MessageBox.Show("请检查文件格式是否正确", "错误");
                }
            }
        }

        private void Button_Send_Click(object sender, EventArgs e)
        {
            try
            {
                server = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                IPEndPoint IPeP = new IPEndPoint(IPAddress.Any, 9050);
                server.Bind(IPeP);
                server.Listen(20);
                threadServer = new Thread(ListenConnecting);
                threadServer.IsBackground = true;
                threadServer.Start();
                TextBox_Process.AppendText("等待接收方应答...\n");
                Button_Start.Enabled = false;
                Button_SendN_1.Enabled = true;
            }
            catch (System.Net.Sockets.SocketException)
            {
                MessageBox.Show("已开始通信，请等待上一次通信完成或者重启服务！");
            }
        }

        private void ListenConnecting()
        {
            while (true)
            {
                connection = server.Accept();
                TextBox_Process.AppendText("接收方已响应，开始发送随机数N1和身份标识。\n");
                ParameterizedThreadStart pts = new ParameterizedThreadStart(ServerRecMsg);
                Thread thr = new Thread(pts);
                thr.IsBackground = true;
                thr.Start(connection);
            }
        }

        private void ServerRecMsg(object socketClientPara)
        {
            int index = 0;
            Socket socketServer = socketClientPara as Socket;
            try
            {
                while (true)
                {
                    byte[] arrServerRecMsg = new byte[1024 * 1024];
                    int length = socketServer.Receive(arrServerRecMsg);
                    string strRecMsg = Encoding.UTF8.GetString(arrServerRecMsg, 0, length);
                    switch (index)
                    {
                        case 0:
                            TextBox_Process.AppendText("接收方发送的N1、N2已收到，请导入发送方私钥进行解密。\n");
                            encryptedN_1 = strRecMsg;
                            break;
                        case 1:
                            encryptedN_2 = strRecMsg;
                            break;
                    }
                    index++;
                }
            }
            catch (System.Net.Sockets.SocketException)
            {
                MessageBox.Show("断开连接！","警告");
            }
        }

        private void ServerSendMsg(string sendMsg)
        {
            byte[] arrSendMsg = Encoding.UTF8.GetBytes(sendMsg);
            connection.Send(arrSendMsg);
        }

        private void Button_Send_Click_1(object sender, EventArgs e)
        {
            ServerSendMsg(encryptedN_1);
            ServerSendMsg(encryptedIDa);
            Button_OpenPrivateKey.Enabled = true;
        }

        private void Button_OpenPrivateKey_Click(object sender, EventArgs e)
        {
            OpenFileDialog fileDialog = new OpenFileDialog();
            fileDialog.Multiselect = true;
            fileDialog.Title = "请选择文件";
            fileDialog.Filter = "文件格式(*.xml)|*.xml";
            if (fileDialog.ShowDialog() == DialogResult.OK)
            {
                string file = fileDialog.FileName;
                MessageBox.Show("已选择文件:" + file, "选择文件提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                TextBox_PrivateKeyPath.Text = fileDialog.FileName;
                XmlDocument xmlDoc = new XmlDocument();
                xmlDoc.Load(fileDialog.FileName);
                XmlNode root = xmlDoc.SelectSingleNode("RSAKeyValue");
                if (root != null)
                {
                    if (root.SelectSingleNode("D") != null)
                    {
                        StreamReader sr = new StreamReader(fileDialog.FileName, false);
                        privateKey = sr.ReadLine().ToString();
                        sr.Close();
                        try
                        {
                            N_1 = RSA.DecryptPrivateKey(privateKey, encryptedN_1);
                            decryptedN_2 = RSA.DecryptPrivateKey(privateKey, encryptedN_2);
                            TextBox_Process.AppendText("发送方私钥已加载完成，即将对随机数N1进行解密。\n");
                            TextBox_Process.AppendText("随机数N1已解密，为：" + N_1 + "\n可确定接收方是B。\n");
                            TextBox_Process.AppendText("下面先用发送方私钥对N2解密，然后用接收方公钥对N2加密。\n");
                            encryptedN_2 = RSA.EncryptPublicKey(publicKey, decryptedN_2);
                            TextBox_Process.AppendText("操作完成，发送N2给接收方。\n");
                            Button_Start.Enabled = true;
                            Button_SendN_2.Enabled = true;
                        }
                        catch (Exception)
                        {
                            TextBox_Process.AppendText("密钥文件不匹配，解密失败！\n");
                            MessageBox.Show("请选择有效的密钥文件！","错误");
                        }
                    }
                    else
                    {
                        MessageBox.Show("未找到私钥请检查文件是否正确", "错误");
                    }
                }
                else
                {
                    MessageBox.Show("请检查文件格式是否正确", "错误");
                }
            }
        }

        private void Button_SendN_2_Click(object sender, EventArgs e)
        {
            ServerSendMsg(encryptedN_2);
            TextBox_Process.AppendText("最后发送会话密钥KS。\n");
            Button_SendKS.Enabled = true;
        }

        private void Button_SendKS_Click(object sender, EventArgs e)
        {
            KS = RSA.EncryptPublicKey(publicKey, KS);
            ServerSendMsg(KS);
            TextBox_Process.AppendText("以上操作即为密钥协商。\n");
        }

        private void 退出ToolStripMenuItem2_Click(object sender, EventArgs e)
        {
            System.Environment.Exit(0);
        }
    }
}
